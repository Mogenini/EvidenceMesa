def move(self):
    # Check if the car is parked
    if self.isParked:
        return
    
    current_position = self.pos

    # Check directional layers to determine allowed movement
    right_value = self.model.grid.properties["RightLayer"].get_cell(current_position)
    left_value = self.model.grid.properties["LeftLayer"].get_cell(current_position)
    up_value = self.model.grid.properties["UpLayer"].get_cell(current_position)
    down_value = self.model.grid.properties["DownLayer"].get_cell(current_position)
    
    # Attempt to move based on the directional values (30=Right, 40=Left, 50=Up, 60=Down)
    if right_value == 30:
        next_position = (current_position[0], current_position[1] + 1)
    elif left_value == 40:
        next_position = (current_position[0], current_position[1] - 1)
    elif up_value == 50:
        next_position = (current_position[0] - 1, current_position[1])
    elif down_value == 60:
        next_position = (current_position[0] + 1, current_position[1])
    else:
        # If no direction is set, stay in place
        return

    # Check if the next cell is empty and has no red light
    if self.model.grid.is_cell_empty(next_position):
        traffic_light = self.model.grid.properties["trafficLightLayer"].get_cell(next_position)
        if traffic_light == 50:  # Red light
            return  # Stop if red light is present
        elif traffic_light == 40 or traffic_light == 0:  # Green or no light
            self.model.grid.move_agent(self, next_position)

